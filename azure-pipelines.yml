trigger:
- main 

pool: Self
# vmImage: 'windows-latest'

stages:
- stage: Build
  jobs:
  - job: BuildAndPushDockerImage
    displayName: 'Build and Push Docker Image'
    steps:
    - checkout: self

    # - script: |
    #     # Download Trivy
    #     Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/download/v0.20.1/trivy_0.20.1_Windows-64bit.zip -OutFile trivy.zip
    #     Expand-Archive -Path trivy.zip -DestinationPath C:\Trivy -Force
    #     Remove-Item trivy.zip
    #   displayName: 'Install Trivy'

    - script: |
        docker build -t my-cc-app .
      displayName: 'Build Docker Image'
      
    - script: |
        docker tag my-cc-app arf21.jfrog.io/arf-docker/my-cc-app:v4
        docker login arf21.jfrog.io -u arfaat.tamboli@unisys.com -p AKCpBrvb13G9vALPp3rV4hrzfzBQ4jeFys9YeHdxw7iwmeJRNLat9y3jm6H4MJfcxo8qADTZ6
      displayName: 'Authenticate Login'
      
    - script: |
        # Scan Docker image with Trivy
        trivy image --severity HIGH --no-progress my-cc-app
        SET trivyExitCode=%ERRORLEVEL%
        REM Check if vulnerabilities were found and fail the build accordingly        
        # Check if vulnerabilities were found and fail the build accordingly
        IF %trivyExitCode% NEQ 0 (
        ECHO Trivy found vulnerabilities. Exiting with code %trivyExitCode%.
        EXIT /B %trivyExitCode%
        )     
        displayName: 'Scan Docker Image with Trivy'
      
    - script: |
        docker push arf21.jfrog.io/arf-docker/my-cc-app:v4
      displayName: 'Push Docker Image'
    - task: CreateBug@2
      inputs:
        isyamlpipeline: true
        custompaths: true
        areapath: 'PipelineEg'
        iterationpath: 'PipelineEg\Sprint 1'
        customrequestor: true
        customrequestorid: 'arfaat021@gmail.com'
      condition: failed()
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
